{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/index.js","../src/utils.js","../src/globalAPI.js","../src/observe/dep.js","../src/observe/watcher.js","../src/vdom/index.js","../src/vdom/patch.js","../src/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\r\n\r\n// 匹配 <xxx 开始的标签名，也就是开始标签的前半部分，最终匹配到的分组是开始标签的名字\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`)\r\n\r\n// 匹配结束标签 </xxx> 最终匹配到的分组是结束标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\r\n\r\n// 匹配标签上的属性，属性的第一个分组是属性的名称（key），第3 | 4 | 5 分组中有一个是他的值\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\r\n\r\n// 匹配开始标签的结束部分的 比如 <span> 的>  和 <br/> 的 />\r\nconst startTagClose = /^\\s*(\\/?)>/\r\n\r\n// 解析 html\r\nexport function parseHTML(html) {\r\n    const ELEMENT_TYPE = 1 // 元素节点类型\r\n    const TXET_TYPE = 3 // 文本节点类型\r\n\r\n    let stack = [] // 栈，用于创建语法树时判断节点的父节点\r\n    let currentParent = null; // 栈顶指针，指向栈中的最后一个节点 \r\n    let root = null // 指向 AST 语法树的根节点\r\n\r\n    // 创建语法树节点函数\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            attrs,\r\n            children: [],\r\n            parent: null\r\n        }\r\n    }\r\n\r\n    // 下面的三个方法都是用于生成抽象语法树的\r\n    // 处理开始标签\r\n    function start(tag, attrs) {\r\n        // 遇到开始标签，入栈\r\n        let node = createASTElement(tag, attrs)\r\n\r\n        if (!root) root = node //还没有根AST节点，那么这个节点就是根节点\r\n\r\n        // 栈中最后一个节点就是新节点的父节点\r\n        if (currentParent) {\r\n            node.parent = currentParent\r\n            currentParent.children.push(node)\r\n        }\r\n\r\n        // 节点入栈\r\n        stack.push(node)\r\n        // 移动栈顶指针\r\n        currentParent = node\r\n    }\r\n\r\n    // 处理文本标签\r\n    function chars(text) {\r\n        // 把空文本删掉，实际上源码中是会保存两个空格的，多于两个空格的就删掉了\r\n        text = text.replace(/\\s/g, '')\r\n        // 文本标签不用入栈，他就是当前栈顶指针指向的那个开始节点的子节点\r\n        text && currentParent.children.push({\r\n            type: TXET_TYPE,\r\n            text,\r\n            parent: currentParent\r\n        })\r\n    }\r\n\r\n    // 处理结束标签\r\n    function end(tag) {\r\n        // 遇到结束标签，弹出栈里的最后一个开始节点，并且更新 currentParent\r\n        stack.pop()\r\n        currentParent = stack[stack.length - 1]\r\n    }\r\n\r\n    // 删除html的前 n 位字符\r\n    function advance(n) {\r\n        html = html.substring(n)\r\n    }\r\n    // 解析开始标签\r\n    function parseStarTag() {\r\n        const start = html.match(startTagOpen) // 得到一个数组，以div为例：['<div','div']，没匹配到，start 为 null\r\n        if (start) {\r\n            // 匹配到了，返回开始标签的对象\r\n            const match = {\r\n                tagName: start[1],\r\n                attrs: []\r\n            }\r\n            // 把匹配过的部分删掉，便于继续向后匹配\r\n            advance(start[0].length)\r\n\r\n            // 继续向后匹配，获得开始标签的属性，一直匹配到开始标签的结束位置\r\n            let attr, end\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                // 把匹配到的属性删掉\r\n                if (attr) advance(attr[0].length)\r\n                match.attrs.push({\r\n                    name: attr[1],\r\n                    value: attr[3] || attr[4] || attr[5] // 或的特性，找到第一个真值就不会再继续了\r\n                })\r\n            }\r\n            // 把开始标签的结束位置删掉\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n\r\n            return match\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    // html 一般是以 < 开头的，如果不是以 < 开头的，说明开头是一个文本节点\r\n    while (html) {\r\n        // 如果 textEnd 为 0，说明模版开头是一个标签（开始或结束标签未知）\r\n        // 如果 textEnd 不是 0，说明模版开头是一段文本，textEnd 表示文本节点结束的位置\r\n        let textEnd = html.indexOf('<')\r\n\r\n        if (textEnd === 0) {\r\n            //开头是标签，尝试匹配是否为开始标签\r\n            const startTagMatch = parseStarTag()\r\n\r\n            // 匹配到了开始标签，也把开始标签从html中删除掉了，需要进行下一轮的匹配了\r\n            if (startTagMatch) {\r\n                // 把开始标签交给生成语法树的函数处理\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            else {\r\n                // 不是开始标签，那么匹配到的一定是结束标签\r\n                const endTagMatch = html.match(endTag)\r\n                if (endTagMatch) {\r\n                    // 把结束标签交给生成语法树的函数处理\r\n                    end(endTagMatch[1])\r\n                    // 把匹配过的部分删除\r\n                    advance(endTagMatch[0].length)\r\n                    continue\r\n                }\r\n            }\r\n        }\r\n\r\n        // 处理文本节点\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd) // 截取文本节点的内容\r\n\r\n            if (text) {\r\n                // 把文本节点的内容交给生成语法树的函数处理\r\n                chars(text)\r\n                advance(text.length) // 把文本节点从 html 中删除\r\n            }\r\n        }\r\n    }\r\n    return root\r\n}","import { parseHTML } from \"./parse\"\r\n\r\n\r\n\r\n// 匹配双花括号 {{value}}\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\r\n\r\n/* 语法树结构\r\n    元素节点结构\r\n {\r\n     tag: 'div', // 标签名\r\n     type: 1, // 节点类型：1 元素节点 3 文本节点\r\n     attrs: [{ name: 'id', value: 'app' }], // 属性数组\r\n     parent: null, // 父节点，根节点的父节点wei null\r\n     children: [  // 节点下的子节点\r\n         {}, {}\r\n     ]\r\n }\r\n\r\n    文本节结构\r\n {\r\n    type: 3,\r\n    text,\r\n    parent: currentParent\r\n }\r\n */\r\n\r\n// 将 template 模版转化成 AST 语法树\r\n\r\nfunction genProps(attrs) {\r\n    let str = ``\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i]\r\n        if (attr.name === 'style') {\r\n            // 单独处理style属性，因为要将这个属性封装成对象\r\n            let obj = {}\r\n            attr.value.split(';').forEach(item => {\r\n                let [key, value] = item.split(':')\r\n                obj[key] = value\r\n            })\r\n            attr.value = obj\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n    }\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\n\r\n// 生成某一子节点的字符串参数\r\nconst genChild = (item) => {\r\n    if (item.type === 1) {\r\n        // 是元素节点，直接调用codegen生成\r\n        return codegen(item)\r\n    } else {\r\n        // 是文本节点\r\n        // 判断文本里面有没有变量，就是 {{}}\r\n        let text = item.text\r\n        if (!defaultTagRE.test(text)) {\r\n            // 是纯文本节点\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else {\r\n            // 文本中有变量\r\n            let tokens = [] //  保存截取的结果\r\n            let match\r\n            defaultTagRE.lastIndex = 0 // 上面test了，将指针归位\r\n            let lastIndex = 0 // 用于截取非变量文本\r\n            while (match = defaultTagRE.exec(text)) { // exec 方法，遇到满足正则的字符串就返回一次\r\n                let index = match.index\r\n                // 如果这次匹配到结果的开始位置和上一次匹配结束的位置不同，说明这两个位置中间有一个非变量的纯文本\r\n                if (index > lastIndex) {\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                // 匹配变量的结果\r\n                tokens.push(`_s(${match[1].trim()})`) //去掉{{}} 中的空格\r\n\r\n                // 移动 lastIndex，保存上一次匹配的最后位置\r\n                lastIndex = index + match[0].length\r\n            }\r\n\r\n            // 循环结束之后，还要判断一次有没有剩余的纯文本\r\n            if (lastIndex < text.length) {\r\n                // 说明上一次匹配之后，还剩余了文本，那么这个文本一定不是变量\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            return `_v(${tokens.join('+')})`\r\n        }\r\n    }\r\n}\r\n\r\n// 生成所有子节点的字符串参数\r\nconst genChildren = (children) => {\r\n    return children.map(item => genChild(item))\r\n}\r\n\r\nfunction codegen(ast) {\r\n    let children = genChildren(ast.children)\r\n    let code = `_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'}${ast.children.length ? `,${children}` : ''})`\r\n    // console.log(code);\r\n    return code\r\n}\r\n\r\n\r\n// 编译模版，返回render方法\r\nexport function compileToFunction(template) {\r\n    // 1. 将 template 模版转化成 AST 语法树\r\n    let ast = parseHTML(template)\r\n\r\n    // console.log(ast);\r\n    // 2. 生成 render 方法\r\n\r\n    // 目标：把AST语法树组装成下面这样的语法\r\n    // _c 生成元素节点\r\n    // _v 生成文本节点\r\n    // _s 处理变量\r\n    // render(){\r\n    // return _c('div', { id: 'app', style: { \"color\": 'red' } }, _v(_s(name) + 'hello'), _v('span', null, _v('text1')))\r\n    // }\r\n\r\n    let code = codegen(ast)\r\n\r\n    code = `with(this){\r\n        return ${code}\r\n    }` // 使用 with，改变变量的取值位置，让函数中的变量都向vm上去取值\r\n\r\n    let render = new Function(code) // 使用 new Function 生成 render 函数\r\n\r\n    return render\r\n}","// 合并策略\r\nconst strats = {}\r\nconst LIFECYCLE = [\r\n    'beforeCreated',\r\n    'created',\r\n    'beforeMounted',\r\n    'mounted',\r\n    'beforeUpdate',\r\n    'update',\r\n    'beforeDestroy',\r\n    'destroyed'\r\n]\r\nLIFECYCLE.forEach(hook => {\r\n    strats[hook] = function (parent, child) {\r\n        // hook 的合并策略\r\n        if (child) {\r\n            if (parent) {\r\n                // 新旧都有，合并，拼接在一起\r\n                return parent.concat(child)\r\n            } else {\r\n                // 旧的里面没有，将传入的新的包装成数组\r\n                return [child]\r\n            }\r\n        } else {\r\n            // 新的没有，不用合并\r\n            return p\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// 合并两个对象，合并mixin时用到\r\nexport function mergeOptions(parent, child) {\r\n    const options = {}\r\n\r\n\r\n    // 合并老的，其实就是将{create:fn()} => {create:[fn]}，数组化\r\n    for (let key in parent) {\r\n        mergeField(key)\r\n    }\r\n\r\n    for (let key in child) {\r\n        if (!parent.hasOwnProperty(key)) {\r\n            // 不合并已经合并过的属性\r\n            mergeField(key)\r\n        }\r\n    }\r\n\r\n    // 合并options，优先后传入的mixin\r\n    function mergeField(key) {\r\n        if (strats[key]) {\r\n            // 有相应的策略，按照策略合并\r\n            options[key] = strats[key](parent[key], child[key])\r\n        } else {\r\n            // 策略模式，针对不同的属性采取不同的合并策略\r\n            options[key] = child[key] || parent[key]\r\n        }\r\n\r\n    }\r\n\r\n    return options\r\n}","import { mergeOptions } from \"./utils\";\r\n\r\n\r\n\r\nexport function initGlobalAPI(Vue) {\r\n\r\n    Vue.options = {}\r\n\r\n    Vue.mixin = function (mixin) {\r\n        // 合并原有的钩子和传进来的钩子\r\n        this.options = mergeOptions(this.options, mixin)\r\n        return this\r\n    }\r\n\r\n}","let id = 0\r\n\r\nclass Dep {\r\n    constructor() {\r\n        this.id = id++\r\n        // 用于收集数据对应的 watcher\r\n        this.subs = []\r\n    }\r\n\r\n    // 将 dep 传递给 watcher，进行去重\r\n    depend() {\r\n        // this.subs.push(Dep.target)\r\n        Dep.target.addDep(this)\r\n    }\r\n\r\n    // 给 dep 收集对应的 watcher 依赖\r\n    addSub(watcher) {\r\n        this.subs.push(watcher)\r\n    }\r\n\r\n    // 数据更新后，通知 watcher 更新\r\n    notify() {\r\n        this.subs.forEach(watcher => watcher.update())\r\n    }\r\n}\r\n\r\nDep.target = null\r\n\r\n\r\nlet stack = []\r\n\r\n/**\r\n * watcher 入栈\r\n * @param {Object} this watcher \r\n */\r\nexport function pushTarget(watcher) {\r\n    stack.push(watcher)\r\n    Dep.target = watcher // 全局记录\r\n}\r\n\r\n/**\r\n * watcher 出栈\r\n * @param {Object} this watcher \r\n */\r\nexport function popTarget() {\r\n    stack.pop()\r\n    Dep.target = stack[stack.length - 1]\r\n}\r\nexport default Dep","import Dep, { popTarget, pushTarget } from \"./dep\";\r\n\r\nlet id = 0;\r\n\r\nclass Watcher {\r\n    // vm watcher 对应的组件的实例，fn 组件对应的渲染函数\r\n    constructor(vm, exprOrFn, options, cb) {\r\n        // 使用 id 来区分不同组件的 watcher\r\n        this.id = id++\r\n\r\n        if (typeof exprOrFn === 'string') {\r\n            // exprOrFn 若为字符串，改成函数\r\n            this.getter = function () {\r\n                return vm[exprOrFn]\r\n            }\r\n        } else {\r\n            // 把渲染函数绑定watcher到实例上，调用getter即可重新渲染，更新视图\r\n            this.getter = exprOrFn\r\n        }\r\n\r\n\r\n        // 标记是否是一个渲染watcher\r\n        this.renderWatcher = options\r\n        // 收集 watcher 对应的 dep\r\n        this.deps = []\r\n        // 使用 set 保存 deps 中所有 dep 的id，便于去重操作\r\n        this.depsId = new Set()\r\n        // 是否为懒 watcher\r\n        this.lazy = options.lazy\r\n        //计算属性的缓存值\r\n        this.dirty = this.lazy\r\n        // 初始化调用\r\n        this.value = this.lazy ? undefined : this.get()\r\n        // 记录 vm\r\n        this.vm = vm\r\n        // 记录回调\r\n        this.cb = cb\r\n        // 判断是不是用户自己创建的 watcher，也就是 watch 对应的 watcher\r\n        this.user = options.user\r\n    }\r\n\r\n    // 执行传入的回调函数\r\n    get() {\r\n        // 在渲染开始之前，把 watcher 挂载到全局，也就是 Dep 类上（静态属性）\r\n        pushTarget(this)\r\n        let value = this.getter.call(this.vm);\r\n        // 渲染结束，把当前的 watcher 出栈\r\n        popTarget()\r\n        return value\r\n    }\r\n\r\n    // 计算属性求值\r\n    evaluate() {\r\n        // 获取到用户定义的 get 方法的返回值\r\n        this.value = this.get()\r\n        this.dirty = false\r\n    }\r\n    // 计算属性用，让每一个计算属性的依赖收集上层 watcher\r\n    depend() {\r\n        for (let i = this.deps.length - 1; i >= 0; i--) {\r\n            this.deps[i].depend(this)\r\n        }\r\n    }\r\n\r\n    // 给 watch 添加 dep\r\n    addDep(dep) {\r\n        // 要判断这个 dep 是否已经被记录，防止重复记录\r\n        let id = dep.id\r\n        if (!this.depsId.has(id)) {\r\n            // id 不存在与 depsId 中，则这个 dep 没有被 watcher 收集过\r\n            this.deps.push(dep)\r\n            this.depsId.add(id)\r\n            // 让 dep 收集 watcher\r\n            dep.addSub(this)\r\n        }\r\n    }\r\n\r\n    // 更新视图\r\n    update() {\r\n        // 如果是计算属性依赖的值发生变化，标志脏值，下次取值会重新计算\r\n        if (this.lazy) {\r\n            this.dirty = true\r\n        } else {\r\n            // 把当前的 watcher 暂存在队列中\r\n            queueWatcher(this)\r\n        }\r\n    }\r\n\r\n    // 执行渲染逻辑\r\n    run() {\r\n        let oldValue = this.value\r\n        let newValue = this.get()\r\n        if (this.user) {\r\n            this.cb.call(this.vm, oldValue, newValue)\r\n        }\r\n    }\r\n\r\n}\r\n// 缓存 watcher 队列\r\nlet queue = []\r\n// 去重的辅助对象，源码中没用 set，用的是对象\r\nlet has = []\r\n// 防抖\r\nlet pending = false\r\n\r\n// 刷新 watcher 队列\r\nfunction flushSchedulerQueue() {\r\n    // 拷贝一份queue，如果在更新的过程中产生了新的 watcher，会加入到 queue 队列中，下一次清空队列时才执行，不会在这一次执行\r\n    let flushQueue = queue.slice(0)\r\n    queue = []\r\n    has = {}\r\n    pending = false\r\n    flushQueue.forEach(item => item.run())\r\n}\r\n\r\nfunction queueWatcher(watcher) {\r\n    // 通过判断watcher的id进行去重，避免同一个组件多次刷新\r\n    const id = watcher.id\r\n    if (!has[id]) {\r\n        // 没有重复\r\n        queue.push(watcher)\r\n        has[id] = true\r\n        // 在第一次加入 watcher 之后，就会将刷新队列的任务加入\r\n        if (!pending) {\r\n            nextTick(flushSchedulerQueue);\r\n            pending = true\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// nextTick 的任务排队\r\nlet callbacks = []\r\n// 防抖\r\nlet waiting = false\r\n// 清空调度队列\r\nfunction flushCallbacks() {\r\n    let cds = callbacks.slice(0)\r\n    waiting = false\r\n    callbacks = []\r\n    cds.forEach(cb => cb())\r\n}\r\n\r\n// nextTick 优雅降级\r\nlet timerFunc;\r\nif (Promise) {\r\n    timerFunc = () => {\r\n        Promise.resolve().then(flushCallbacks)\r\n    }\r\n} else if (MutationObserver) {\r\n    let observer = new MutationObserver(flushCallbacks)\r\n    let textNode = document.createTextNode(1)\r\n    observer.observe(textNode, {\r\n        characterData: true\r\n    })\r\n    timerFunc = () => {\r\n        textNode.textContent = 2\r\n    }\r\n} else if (setImmediate) {\r\n    timerFunc = () => {\r\n        setImmediate(flushCallbacks)\r\n    }\r\n} else {\r\n    timerFunc = () => {\r\n        setTimeout(flushCallbacks, 0);\r\n    }\r\n}\r\n\r\nexport function nextTick(cb) {\r\n    callbacks.push(cb)\r\n    if (!waiting) {\r\n        timerFunc()\r\n        waiting = true\r\n    }\r\n}\r\nexport default Watcher","// 构造 VNode 的相关方法\r\n\r\n// 创建元素节点的VNode，即 h()\r\nexport function createElement(vm, tag, data = {}, ...children) { // Vue 实例，标签名，属性，子节点\r\n    if (data == null) {\r\n        data = {}\r\n    }\r\n    let key = data.key\r\n    if (key) delete data.key\r\n    return vnode(vm, tag, key, data, children)\r\n}\r\n\r\n// 创建文本节点的VNode\r\nexport function createTextVNode(vm, text) {\r\n    return vnode(vm, undefined, undefined, undefined, undefined, text)\r\n}\r\n\r\n// 创建 Vnode  的方法\r\nfunction vnode(vm, tag, key, data, children, text) {\r\n    // 返回创建的虚拟 DOM\r\n    return {\r\n        vm,\r\n        tag,\r\n        key,\r\n        data,\r\n        children,\r\n        text\r\n        // 事件、插槽、指令......\r\n    }\r\n}\r\n\r\n// 和 AST 不一样，AST 只是语法层面的抽象，语法是什么样，AST节点就必须是什么样，不能人为添加一些属性\r\n// 但是虚拟 DOM 是描述 dom 元素的，可以增加一些自定义的属性\r\n// AST 是描述语言的\r\n// 虚拟 DOM 是描述 DOM 的","// 创建真实DOM\r\nexport function createElm(vnode) {\r\n    // 将 VNode 解构\r\n    let { tag, data, children, text } = vnode\r\n    if (typeof tag === 'string') {\r\n        // 传入的是标签，文本节点的tag为undefined\r\n        // 创建元素\r\n        // ！！！把真实 DOM 挂载到 虚拟DOM 上！便于后续更新，比如修改了属性，就可以直接找到真实的dom进行更新，挂载在 el 属性上\r\n        vnode.el = document.createElement(tag)\r\n\r\n        // 更新元素属性\r\n        patchProps(vnode.el, {}, data)\r\n\r\n        // 创建子DOM\r\n        children.forEach((item) => {\r\n            // 挂载子DOM\r\n            vnode.el.appendChild(createElm(item))\r\n        })\r\n    } else {\r\n        vnode.el = document.createTextNode(text)\r\n    }\r\n    return vnode.el\r\n}\r\n\r\n// 处理属性\r\nexport function patchProps(el, oldProps = {}, props = {}) {\r\n    let oldStyles = oldProps.style || {}\r\n    let newStyles = props.style || {}\r\n\r\n    // 循环旧的style样式，看看新的样式中是否还存在这个样式\r\n    for (let key in oldStyles) {\r\n        // 新的vnode中没有这个样式了，从el上删除这个样式\r\n        if (!newStyles[key]) {\r\n            el.style[key] = ''\r\n        }\r\n    }\r\n\r\n    // 循环旧的属性,查看新的属性中是否还存在这个属性\r\n    for (let key in oldProps) {\r\n        if (!props[key]) {\r\n            // 新的vnode中没有这个属性，从el上删除这个属性\r\n            el.removeAttribute(key)\r\n        }\r\n    }\r\n\r\n    // 用新的覆盖掉老的，上面两步处理是为了防止旧的属性中有需要删除的属性，而新的属性中没有\r\n    for (let key in props) {\r\n        // 单独处理style\r\n        if (key === 'style') {\r\n            for (let styleName in props.style) {\r\n                el.style[styleName] = props.style[styleName]\r\n            }\r\n        } else {\r\n            el.setAttribute(key, props[key])\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * 接收两个参数\r\n * 1. 初渲染：第一个参数为真实的 DOM 对象，第二个参数为 VNode，则根据第二个参数，生成真实 DOM，替换第一个 DOM 对象\r\n * 2. 更新：第一个参数 和 第二个参数都为 VNode，则比较两者 vnode差异，更新真实 dom\r\n * @param {Object} oldVnode 一个 VNode 或者是一个真实的 DOM 对象\r\n * @param {Object} newVnode 新的 VNode\r\n */\r\nexport function patch(oldVnode, newVnode) {\r\n    const isRealElement = oldVnode.nodeType\r\n    // console.log(document.getElementsByTagName('body'));\r\n    // oldVnode = document.getElementById('app')\r\n    // debugger\r\n\r\n    if (isRealElement) {\r\n        // 对象上有 nodeType 属性，则为真实 DOM\r\n        const elm = oldVnode\r\n\r\n        const parentElm = elm.parentNode // 获取到老节点的父节点，便于后面删除和新增（即替换）操作\r\n\r\n        // 创建真实 dom\r\n        let newElm = createElm(newVnode)\r\n\r\n        // 先把新 DOM 插入到老DOM的后面，然后再删除老DOM，这样可以保证新DOM替换了老DOM\r\n        parentElm.insertBefore(newElm, elm.nextSibling)\r\n        parentElm.removeChild(elm)\r\n        // oldVnode = newElm;\r\n\r\n        // return newElm\r\n    } else {\r\n        return patchVnode(oldVnode, newVnode)\r\n    }\r\n}\r\n\r\n/**\r\n * 判断两个虚拟节点是不是同一个（标签名和key相同就是同一个）\r\n * @param {*} vnode1 虚拟节点1\r\n * @param {*} vnode2 虚拟节点2\r\n * @returns \r\n */\r\nexport function isSameVnode(vnode1, vnode2) {\r\n    // if(!vnode1 && vnode2) return false\r\n    return vnode1?.tag === vnode2?.tag && vnode1?.key === vnode2?.key\r\n}\r\n\r\n\r\n/**\r\n * 对比两个虚拟节点，并做相应的处理\r\n    * @returns 真实dom\r\n    */\r\nfunction patchVnode(oldVnode, newVnode) {\r\n    // 进行 diff 算法，更新\r\n    // console.log(oldVnode, newVnode);\r\n\r\n    if (!isSameVnode(oldVnode, newVnode)) {\r\n        // 1. 外层节点不同，直接替换，不用比对了\r\n        let el = createElm(newVnode)\r\n        oldVnode.el.parentNode.replaceChild(el, oldVnode.el)\r\n        return el\r\n\r\n    }\r\n\r\n    let el = newVnode.el = oldVnode.el; // 复用老节点的元素\r\n\r\n    // 如果是文本,比较文本的内容(文本的tag都是undefined)\r\n    if (!oldVnode.tag) {\r\n        if (oldVnode.text !== newVnode.text) {\r\n            // bug 修复 newVnode.textContent -> newVnode.text\r\n            el.textContent = newVnode.text\r\n        }\r\n    }\r\n\r\n    // 2. 两个节点相同（节点的 tag 和 key 相同），对比节点属性是否相同。没写 key 那 key 的值就是 undefined，也是一样的。（复用老节点，更新差异属性）\r\n    patchProps(el, oldVnode.data, newVnode.data)\r\n\r\n    // 3. 外层节点比对完成，比较他们的子节点\r\n    let oldChildren = oldVnode.children || []\r\n    let newChildren = newVnode.children || []\r\n\r\n    // 有一边无子节点\r\n    if (oldChildren.length > 0 && newChildren.length > 0) {\r\n        // 完整的 diff，继续比较子节点\r\n        updateChlidren(el, oldChildren, newChildren)\r\n    } else if (newChildren.length > 0) {\r\n        // 新的 vnode 有子节点，旧的没有，直接插入新的子节点\r\n        mountChildren(el, newChildren)\r\n    } else if (oldChildren.length > 0) {\r\n        // 新的 vnode 没有子节点，旧的有，要删除旧的子节点\r\n        unmountChildren(el)\r\n    }\r\n\r\n    return el\r\n}\r\n\r\n\r\n/**\r\n * 生成新的真实子节点，并将新的子节点挂载到原来的真实父DOM下\r\n * @param {object} el 挂载点，真实dom\r\n * @param {Array} newChildren 新的子节点，Vnode\r\n */\r\nfunction mountChildren(el, newChildren) {\r\n    for (let i = 0; i < newChildren.length; i++) {\r\n        let child = newChildren[i]\r\n        el.appendChild(createElm(child))\r\n    }\r\n}\r\n\r\n/**\r\n * 删除真实DOM的所有子节点\r\n * @param {object} el 真实DOM\r\n */\r\nfunction unmountChildren(el) {\r\n    el.innerHTML = ''\r\n}\r\n\r\n\r\nfunction updateChlidren(el, oldChildren, newChildren) {\r\n    console.log(oldChildren, newChildren);\r\n\r\n    // 双指针比较\r\n    let oldStartIndex = 0\r\n    let newStartIndex = 0\r\n    let oldEndIndex = oldChildren.length - 1\r\n    let newEndIndex = newChildren.length - 1\r\n\r\n    let oldStartVnode = oldChildren[0]\r\n    let newStartVnode = newChildren[0]\r\n\r\n    let oldEndVnode = oldChildren[oldEndIndex]\r\n    let newEndVnode = newChildren[newEndIndex]\r\n\r\n    /**\r\n     * 构造虚拟dom的映射表，key为vnode的key，value为vnode在数组中的索引\r\n     * @param {Array} children 虚拟子节点数组\r\n     * @returns {Object}    映射表\r\n     */\r\n    function makeIndexByKey(children) {\r\n        let map = {}\r\n\r\n        children.forEach((child, index) => {\r\n            map[child.key] = index\r\n        })\r\n\r\n        return map\r\n    }\r\n\r\n    // 构造映射表\r\n    let map = makeIndexByKey(oldChildren)\r\n\r\n    console.log(map);\r\n\r\n    // 循环比较\r\n    while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\r\n        // console.log(oldStartVnode,newStartVnode);\r\n        // debugger\r\n\r\n        if (!oldStartVnode) {\r\n            oldStartVnode = oldChildren[++oldStartIndex]\r\n        } else if (!oldEndVnode) {\r\n            oldEndVnode = oldChildren[--oldEndIndex]\r\n        } else if (isSameVnode(oldStartVnode, newStartVnode)) {\r\n            // 头头比较\r\n            patchVnode(oldStartVnode, newStartVnode) // 是相同的节点，就递归比较子节点\r\n            // 指针向中间移动\r\n            oldStartVnode = oldChildren[++oldStartIndex]\r\n            newStartVnode = newChildren[++newStartIndex]\r\n        } else if (isSameVnode(oldEndVnode, newEndVnode)) {\r\n            // 尾尾比较\r\n\r\n            patchVnode(oldEndVnode, newEndVnode)\r\n            oldEndVnode = oldChildren[--oldEndIndex]\r\n            newEndVnode = newChildren[--newEndIndex]\r\n        } else if (isSameVnode(oldEndVnode, newStartVnode)) {\r\n            // 交叉比对  头尾比对，类似abcd->dabc\r\n            patchVnode(oldEndVnode, newStartVnode)\r\n            el.insertBefore(oldEndVnode.el, oldStartVnode.el)\r\n            oldEndVnode = oldChildren[--oldEndIndex]\r\n            newStartVnode = newChildren[++newStartIndex]\r\n        } else if (isSameVnode(oldStartVnode, newEndVnode)) {\r\n            // 尾头比对\r\n            patchVnode(oldStartVnode, newEndVnode)\r\n            el.insertBefore(oldStartVnode.el, oldEndVnode.el.nextSibling)\r\n            oldStartVnode = oldChildren[++oldStartIndex]\r\n            newEndVnode = newChildren[--newEndIndex]\r\n        } else {\r\n            // 乱序，通过映射表查找\r\n            // 通过新vnode的key去查找，如果发现key相同，则说明匹配成功，需要复用，取得需要复用节点在原oldChildren数组中的下标\r\n            let moveIndex = map[newStartVnode.key]\r\n            if (moveIndex !== undefined) {\r\n                let moveVnode = oldChildren[moveIndex]\r\n\r\n                // 移动老节点到合适的位置（开始指针的位置）\r\n                el.insertBefore(moveVnode.el, oldStartVnode.el)\r\n\r\n                // 将节点置空\r\n                oldChildren[moveIndex] = undefined\r\n\r\n                // 比较子节点\r\n                patchVnode(moveVnode, newStartVnode)\r\n            } else {\r\n                // 在旧vnode中找不到匹配节点，直接创建新的dom然后插入\r\n                el.insertBefore(createElm(newStartVnode), oldStartVnode.el)\r\n            }\r\n\r\n            newStartVnode = newChildren[++newStartIndex]\r\n        }\r\n    }\r\n\r\n    // 循环完之后，如果还剩节点，则直接插入或删除\r\n    // 新 vnode 有剩余，直接追加\r\n    if (newStartIndex <= newEndIndex) {\r\n        for (let i = newStartIndex; i <= newEndIndex; i++) {\r\n            let childEl = createElm(newChildren[i])\r\n            // 可能向前追加，也可能向后追加\r\n            // el.appendChild(childEl)\r\n            let anchor = newChildren[newEndIndex + 1] ? newChildren[newEndIndex + 1].el : null// 如果尾指针后面有元素，那么就向这个元素前面追加\r\n\r\n            // !!! anchor 为 null 的时候会认为是 appendChild\r\n            el.insertBefore(childEl, anchor)\r\n        }\r\n    }\r\n\r\n    // 旧vnode有剩余需要删除\r\n    if (oldStartIndex <= oldEndIndex) {\r\n        for (let i = oldStartIndex; i <= oldEndIndex; i++) {\r\n            // 处理空节点 undefined\r\n            if (!oldChildren[i]) continue\r\n            // 删除老的节点\r\n            let childEl = oldChildren[i].el\r\n            el.removeChild(childEl)\r\n        }\r\n\r\n    }\r\n}","import Watcher from \"./observe/watcher\"\r\nimport { createElement, createTextVNode } from \"./vdom/index\"\r\nimport { patch } from \"./vdom/patch\"\r\n\r\n\r\nexport function initLifeCycle(Vue) {\r\n    // 生成 Vnode 节点\r\n    Vue.prototype._c = function () {\r\n        return createElement(this, ...arguments)\r\n    }\r\n\r\n    // 处理文本节点\r\n    Vue.prototype._v = function () {\r\n        return createTextVNode(this, ...arguments)\r\n    }\r\n\r\n    // 处理变量\r\n    Vue.prototype._s = function (name) {\r\n        if (typeof name === 'object') {\r\n            return JSON.stringify(name) // 如果变量是对象，json序列化之后再返回\r\n        }\r\n        return name\r\n    }\r\n\r\n    // 挂载 render 函数到实例上\r\n    Vue.prototype._render = function () {\r\n        return this.$options.render.call(this) // 调用生成的render或者是传入的render，call 用于将this指向vm，使render内的变量向vm上取值\r\n    }\r\n\r\n    // 挂载 update 函数到实例上\r\n    Vue.prototype._update = function (vnode) {\r\n        const vm = this\r\n        this.$el = document.getElementById('app')\r\n        const el = this.$el\r\n\r\n        const preVnode = vm._vnode\r\n\r\n        if (preVnode) {\r\n            // 之前渲染过，传递上一次的vnode\r\n            vm.$el = patch(preVnode, vnode)\r\n        } else {\r\n            //第一次渲染\r\n            vm.$el = patch(el, vnode)\r\n        }\r\n\r\n        vm._vnode = vnode // 将组件第一次产生的vnode保存到实例上\r\n        // 传入两个参数，第一个参数是真实 dom，第二个参数是虚拟 dom，patch 会按照 vnode 创建一个真实 dom，替换掉我们传入的 el\r\n        // return vm.$el = patch(el, vnode) // patch 更新 或者 初始化渲染 方法\r\n    }\r\n\r\n}\r\n\r\nexport function mountComponent(vm, el) {\r\n    // 将 el 对应的真实 dom 挂载到 vm 上，便于后面获取\r\n    vm.$el = el\r\n    // // 1. 调用 render 方法，获得虚拟 DOM\r\n    // let vnode = vm._render()\r\n    // console.log(vnode);\r\n\r\n    // // 2. 根据虚拟 DOM，生成真实 DOM\r\n    // vm._update(vnode)\r\n\r\n\r\n    const updateComponent = () => {\r\n        // 1. 调用 render 方法，获得虚拟 DOM\r\n        let vnode = vm._render()\r\n\r\n        // 2. 根据虚拟 DOM，生成真实 DOM\r\n        vm._update(vnode)\r\n    }\r\n    const w = new Watcher(vm, updateComponent, true)\r\n\r\n}\r\n\r\n/**\r\n * 调用并执行vm上的钩子方法\r\n * @param {Object} vm Vue实例\r\n * @param {Array} hook vm的钩子方法\r\n */\r\nexport function callHook(vm, hook) {\r\n    const handlers = vm.$options[hook]\r\n    if (handlers) {\r\n        handlers.forEach(fn => {\r\n            fn.call(vm)\r\n        });\r\n    }\r\n}","    // 重写数组中可以改变数组的7个方法，并返回重写后的原型对象\r\n    let oldProto = Array.prototype\r\n    // 不可以直接修改数组的原型，通过类似于子类重写的方式，使 newProto 的原型指向原来数组的原型，在 newProto 上重写方法不会影响到原数组原型\r\n    let newProto = Object.create(oldProto)\r\n\r\n    const methods = [\r\n        'push',\r\n        'pop',\r\n        'shift',\r\n        'unshift',\r\n        'reverse',\r\n        'sort',\r\n        'splice'\r\n    ]\r\n\r\n    methods.forEach(method => {\r\n        newProto[method] = function (...args) {\r\n            // 调用原有原型上的相同方法，但要注意this问题\r\n            const res = oldProto[method].call(this, ...args)\r\n            // 获取到新增的元素\r\n            let newNode = undefined\r\n            // 对于新增元素的方法，必须给新增的元素添加监听\r\n            if (method === 'push' || method === 'unshift') {\r\n                newNode = args\r\n            } else if (method === 'splice') {\r\n                // spilce 的参数除掉前两个参数之后，才是新增的元素\r\n                newNode = args.slice(2)\r\n            }\r\n\r\n            if (newNode) {\r\n                this.__ob__.observerArray(newNode)\r\n            }\r\n            \r\n            // 通知对应 watcher ，数组发生了变化\r\n            this.__ob__.dep.notify()\r\n\r\n            return res\r\n        }\r\n\r\n    })\r\n\r\n    export default newProto\r\n\r\n","import newProto from \"./array\"\r\nimport Dep from \"./dep\"\r\n\r\n/**\r\n * 将传入的 data 对象使用 defineproperty 进行劫持\r\n * @param {Object} data  要实现响应式的对象\r\n * @returns {} \r\n */\r\nexport function observe(data) {\r\n\r\n\r\n\r\n    // 判断 data 是否需要劫持，非对象不劫持\r\n    if (typeof data !== 'object' || typeof data == 'null') {\r\n        return\r\n    }\r\n\r\n    // 判断 data 是否已经被监听过了\r\n    if (data.__ob__) return data\r\n\r\n    //通过observer类进行监听\r\n    return new Observer(data)\r\n}\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n        // data 可能是对象或者数组，在这给 data 新增属性 dep，让他去收集依赖\r\n        // 给每个对象都增加收集依赖功能\r\n        this.dep = new Dep()\r\n\r\n        // 把 data 对应的 Observer 实例添加到了 data 上，这样做的话，1 是可以通过监测是否存在_ob_属性来检测 data 是否已被监听过，2 是通过 _ob_ 可以访问到 walk 和 observerArray 以及其他的方法，便于其他地方使用\r\n        // 必须把 _ob_ 设置为不可枚举属性才行，否则在递归遍历监听的时候会死循环\r\n        Object.defineProperty(data, '__ob__', {\r\n            value: this,\r\n            enumerable: false\r\n        })\r\n        // 判断data是否为数组，数组不用进行每一项的劫持\r\n        if (Array.isArray(data)) {\r\n            // 通过修改data的原型，重写可以改变数组的方法\r\n            data.__proto__ = newProto\r\n            this.observerArray(data)\r\n        } else {\r\n            this.walk(data)\r\n        }\r\n    }\r\n    // 遍历对象，进行劫持\r\n    walk(data) {\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n    }\r\n\r\n    // 实现数组监测\r\n    observerArray(data) {\r\n        //  遍历数组，如果数组的子项是对象的话，要对这个对象进行劫持\r\n        data.forEach(item => observe(item))\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 递归解决数组嵌套，视图更新\r\n * @param {*} value \r\n */\r\nfunction dependArray(value) {\r\n    for (let i = 0; i < value.length; i++) {\r\n        let current = value[i]\r\n        // 数组中的数组也要收集当前这个 watcher，数组中的数组值发生变化，当前组件也要刷新\r\n        current.__ob__ && current.__ob__.dep.depend()\r\n        if (Array.isArray(current)) {\r\n            dependArray(current)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实现对象指定属性的劫持\r\n * @param {Object} target 被劫持的对象\r\n * @param {String} key 需要被劫持的属性\r\n * @param {*} value 被劫持属性当前的值\r\n */\r\nexport function defineReactive(target, key, value) {\r\n    // 对属性值进行深层递归遍历\r\n    let childOb = observe(value) // childOb.dep 用来收集依赖\r\n    // 为每个属性绑定一个dep\r\n    let dep = new Dep()\r\n    // 闭包。对外暴露了 set 和 get 方法，从而使 value 值不会被回收\r\n    Object.defineProperty(target, key, {\r\n        // 访问属性的时候，触发get\r\n        get() {\r\n            if (Dep.target) {\r\n                // 全局上存在 watcher，收集这个 watcher\r\n                dep.depend()\r\n                if (childOb) {\r\n                    childOb.dep.depend()\r\n                    if (Array.isArray(value)) {\r\n                        dependArray(value)\r\n                    }\r\n                }\r\n            }\r\n            return value\r\n        },\r\n        // 修改属性的时候，触发set\r\n        set(newValue) {\r\n            if (newValue === value) return\r\n            // 修改之后重新劫持，因为如果用户将值修改为对象，那么要对这个对象进行深度劫持\r\n            observe(newValue)\r\n            value = newValue\r\n            // 修改了响应式数据之后，通知观察者更新\r\n            dep.notify()\r\n        }\r\n    })\r\n}","import Dep from \"./observe/dep\"\r\nimport { observe } from \"./observe/index\"\r\nimport Watcher, { nextTick } from \"./observe/watcher\"\r\n\r\n/**\r\n * 初始化状态，分发init\r\n * @param {Object} vm Vue 实例\r\n */\r\nexport function initState(vm) {\r\n    const opts = vm.$options\r\n    // 是否传入data\r\n    if (opts.data) {\r\n        initData(vm)\r\n    }\r\n    // 是否使用计算属性\r\n    if (opts.computed) {\r\n        initComputed(vm)\r\n    }\r\n    // 初始化 watch\r\n    if (opts.watch) {\r\n        initWatch(vm)\r\n    }\r\n}\r\n\r\n/**\r\n * 初始化 watch 选项\r\n * @param {*} vm Vue实例\r\n */\r\nfunction initWatch(vm) {\r\n    let watch = vm.$options.watch\r\n\r\n    // 取出 watch 中的每一个属性\r\n    for (let key in watch) {\r\n        const handler = watch[key] // 可能是数组、字符串、函数\r\n        if (Array.isArray(handler)) {\r\n            //如果是数组，则循环创建 watcher\r\n            for (let i = 0; i < handler.length; i++) {\r\n                createWatcher(vm, key, handler[i])\r\n            }\r\n        } else {\r\n            createWatcher(vm, key, handler)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} vm Vue 实例\r\n * @param {*} key 监听的属性\r\n * @param {*} handler 属性变化执行的回调\r\n * @returns \r\n */\r\nfunction createWatcher(vm, key, handler) {\r\n    // 可能是字符串、函数\r\n    if (typeof handler == 'string') {\r\n        handler = vm[handler]\r\n    }\r\n\r\n    return vm.$watch(key, handler)\r\n}\r\n\r\n/**\r\n * 代理对象，非真正的 Proxy\r\n * @param {Object} vm Vue 实例\r\n * @param {String} target 要代理的属性\r\n * @param {String} key target的建\r\n */\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, {\r\n        get() {\r\n            // 访问 vm[key] 就是在访问 vm._data[key]，即 vm[target][key]\r\n            return vm[target][key]\r\n        },\r\n        set(newValue) {\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 初始化 data 选项\r\n * @param {Object} vm Vue 实例\r\n */\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data\r\n    // 判断 data 的类型，如果是函数，执行它，获得对象。要注意this问题，this应该是Vue实例\r\n    data = typeof data === 'function' ? data.call(vm) : data\r\n\r\n    vm._data = data\r\n    // 对数据对象进行劫持\r\n    observe(data)\r\n    // 代理一层，方便用户访问\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n}\r\n\r\n/**\r\n * 初始化处理 computed 选项\r\n * @param {*} vm Vue实例\r\n */\r\nfunction initComputed(vm) {\r\n    const computed = vm.$options.computed\r\n    const wacthers = vm._computedWatchers = {} // 存储所有计算属性的 watcher，并保存到 vm 上\r\n    // computed 中书写的可能是对象，也可能是函数\r\n    for (let key in computed) {\r\n        let userDef = computed[key]\r\n\r\n        let fn = typeof userDef === 'function' ? userDef : userDef.get\r\n        // 为每一个计算属性创建一个 watcher，每次调用 watcher 时，执行 get 方法获取最新值\r\n        wacthers[key] = new Watcher(vm, fn, { lazy: true }) // new Watcher 默认会执行一次 fn，但 computed 默认是不初始化的，所以加入 lazy 配置项\r\n\r\n        // 把 computed 中定义的变量挂载到 vm 上去\r\n        defineComputed(vm, key, userDef)\r\n    }\r\n}\r\n\r\n/**\r\n * 将 computed 中的属性挂载到 vm 上\r\n * @param {Object} target vm\r\n * @param {string} key 要挂载的属性\r\n * @param {Object} userDef 用户传入的计算属性对象\r\n */\r\nfunction defineComputed(target, key, userDef) {\r\n    const getter = typeof userDef === 'function' ? userDef : userDef.get\r\n    const setter = userDef.set || (() => { })\r\n\r\n    Object.defineProperty(target, key, {\r\n        get: createComputedGetter(key),\r\n        set: setter\r\n    })\r\n}\r\n\r\n/**\r\n * 加入了缓存（脏值监测）的get方法\r\n * @param {string} key 计算属性变量名\r\n * @returns 加入了脏值监测机制的 get 方法\r\n */\r\nfunction createComputedGetter(key) {\r\n    return function () {\r\n        // 获取到对应计算属性的watcher\r\n        const watcher = this._computedWatchers[key]\r\n        // 如果是脏值，那么重新执行用户定义的 get 方法，进行计算\r\n        if (watcher.dirty) {\r\n            // 是脏值\r\n            watcher.evaluate()\r\n        }\r\n        if (Dep.target) {\r\n            // 计算属性 watcher 出栈之后，如果还栈中还存在 watcher ，那么继续收集上层 watcher\r\n            // 要让计算属性中的 watcher 所对应的响应式数据，也去收集渲染 watcher。换句话说就是，收集了计算属性 watcher 的数据，也必须收集当前的渲染 watcher，\r\n            // 这样才能实现数据变化，页面自动重新渲染\r\n            watcher.depend()\r\n        }\r\n        return watcher.value\r\n    }\r\n}\r\n\r\n\r\nexport function initStateMixin(Vue) {\r\n    Vue.prototype.$nextTick = nextTick\r\n    /**\r\n     * $watch API\r\n     * @param {string | function} exprOrFn 字符串或者函数\r\n     * @param {Function} cb watch的回调函数\r\n     */\r\n    Vue.prototype.$watch = function (exprOrFn, cb) {\r\n        // exprOrFn 变化直接执行 cd 回调\r\n        new Watcher(this, exprOrFn, { user: true }, cb)\r\n    }\r\n}","import { compileToFunction } from \"./compiler/index\"\r\nimport { callHook, mountComponent } from \"./lifecycle\"\r\nimport { initState } from \"./state\"\r\nimport { mergeOptions } from \"./utils\"\r\n\r\n/**\r\n * 定义 _init 初始化 Vue 方法，并将其挂载到 Vue 实例的原型上，供 Vue 实例调用\r\n * @param {Object} Vue Vue 实例 \r\n * @returns {Void}\r\n */\r\nexport function initMixin(Vue) {\r\n    Vue.prototype._init = function (options) {\r\n        // this 就是 Vue 实例，经常写 this 太烦，又容易混淆 this，取别名\r\n        const vm = this\r\n        // 将用户选项挂载到 Vue 实例上，便于其他地方使用\r\n        vm.$options = mergeOptions(this.constructor.options, options) // mergeOPtions，合并当前传入的options和Vue的全局options（也就是我们混入的mixin的options）\r\n\r\n        // beforeCreated 生命周期\r\n        callHook(vm, 'beforeCreated')\r\n\r\n        // 初始化状态（data、computed、props等等）\r\n        initState(vm)\r\n\r\n        // created 生命周期\r\n        callHook(vm, 'created')\r\n\r\n\r\n        // 挂载数据，也就是将数据解析（或者说挂载）到 el 指定的 dom 上\r\n        if (options.el) {\r\n            vm.$mount(options.el)\r\n        }\r\n    }\r\n\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this\r\n        // 获取 el 对应的真实 dom\r\n        el = document.querySelector(el)\r\n        const opts = vm.$options\r\n        if (!opts.render) {\r\n            // 没有传 render 选项\r\n            let template\r\n            if (!opts.template && el) {\r\n                // 没有传入模版，但传入了el，那么就去找 el 指定的模版\r\n                // 获取到 el 对应的 HTML 结构，也就是模版\r\n                template = el.outerHTML\r\n            } else {\r\n                if (el) {\r\n                    // 传入了模版和 el\r\n                    template = opts.template\r\n                }\r\n            }\r\n            if (template && el) {\r\n                // 编译模版，获取 render\r\n                const render = compileToFunction(template)\r\n                opts.render = render\r\n            }\r\n        }\r\n        // 如果有模版，则编译成render；反之如果有render，则不必编译。模版和render函数最终都会被统一成render函数\r\n\r\n        mountComponent(vm, el) //得到了render 函数之后，执行组件的挂载\r\n    }\r\n}\r\n\r\n","import { compileToFunction } from \"./compiler/index\"\r\nimport { initGlobalAPI } from \"./globalAPI\"\r\nimport { initMixin } from \"./init\"\r\nimport { initLifeCycle } from \"./lifecycle\"\r\nimport Watcher, { nextTick } from \"./observe/watcher\"\r\nimport { initStateMixin } from \"./state\"\r\nimport { createElm, patch } from \"./vdom/patch\"\r\n\r\n// Vue 实例的构造函数，options 为用户传入的选项（Vue2 的选项式API）\r\nfunction Vue(options) {\r\n    // 初始化操作\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue) //将 _init 方法添加到 Vue 实例原型上，供 Vue 实例调用\r\ninitLifeCycle(Vue)\r\ninitStateMixin(Vue)\r\ninitGlobalAPI(Vue)\r\n\r\n\r\n// 测试用代码\r\n// let render1 = compileToFunction(`<ul key=\"a\">\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"c\">c</li>\r\n//     <li key=\"d\">d</li>\r\n// </ul>`)\r\n// let render2 = compileToFunction(`<ul key=\"a\" id=\"2\">\r\n//     <li key=\"l\">l</li>\r\n//     <li key=\"o\">o</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"m\">m</li>\r\n//     <li key=\"s\">s</li>\r\n// </ul>`)\r\n// let vm1 = new Vue({\r\n//     data: {\r\n//         name: 'zs'\r\n//     }\r\n// })\r\n\r\n// let preVnode = render1.call(vm1)\r\n// // console.log(preVnode);\r\n\r\n// let el = createElm(preVnode)\r\n\r\n// document.body.appendChild(el)\r\n\r\n\r\n\r\n\r\n\r\n// let vm2 = new Vue({\r\n//     data: {\r\n//         name: '666'\r\n//     }\r\n// })\r\n\r\n// let nextVnode = render2.call(vm2)\r\n// // console.log(nextVnode);\r\n// let newEl = createElm(nextVnode)\r\n\r\n// setTimeout(() => {\r\n//     patch(preVnode, nextVnode)\r\n//     // el.parentNode.replaceChild(newEl, el)\r\n// }, 1000);\r\n\r\n\r\n\r\n\r\nexport default Vue"],"names":["ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TXET_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStarTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","defaultTagRE","genProps","str","_loop","i","obj","split","forEach","item","_item$split","_item$split2","_slicedToArray","key","JSON","stringify","slice","genChild","codegen","test","tokens","lastIndex","exec","index","trim","join","genChildren","map","ast","code","compileToFunction","template","render","Function","strats","LIFECYCLE","hook","child","p","mergeOptions","options","mergeField","hasOwnProperty","initGlobalAPI","Vue","mixin","id","Dep","_classCallCheck","subs","_createClass","depend","target","addDep","addSub","watcher","notify","update","pushTarget","popTarget","Watcher","vm","exprOrFn","cb","getter","renderWatcher","deps","depsId","Set","lazy","dirty","undefined","get","user","call","evaluate","dep","has","add","queueWatcher","run","oldValue","newValue","queue","pending","flushSchedulerQueue","flushQueue","nextTick","callbacks","waiting","flushCallbacks","cds","timerFunc","Promise","resolve","then","MutationObserver","observer","textNode","document","createTextNode","observe","characterData","textContent","setImmediate","setTimeout","createElement","data","arguments","_len","Array","_key","vnode","createTextVNode","createElm","el","patchProps","appendChild","oldProps","props","oldStyles","style","newStyles","removeAttribute","styleName","setAttribute","patch","oldVnode","newVnode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","patchVnode","isSameVnode","vnode1","vnode2","replaceChild","oldChildren","newChildren","updateChlidren","mountChildren","unmountChildren","innerHTML","console","log","oldStartIndex","newStartIndex","oldEndIndex","newEndIndex","oldStartVnode","newStartVnode","oldEndVnode","newEndVnode","makeIndexByKey","moveIndex","moveVnode","childEl","anchor","initLifeCycle","prototype","_c","apply","_v","_s","_typeof","_render","$options","_update","$el","getElementById","preVnode","_vnode","mountComponent","updateComponent","callHook","handlers","fn","oldProto","newProto","Object","create","methods","method","_oldProto$method","args","res","newNode","__ob__","observerArray","Observer","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","dependArray","current","childOb","set","initState","opts","initData","computed","initComputed","watch","initWatch","handler","createWatcher","$watch","proxy","_data","wacthers","_computedWatchers","userDef","defineComputed","setter","createComputedGetter","initStateMixin","$nextTick","initMixin","_init","constructor","$mount","querySelector","outerHTML"],"mappings":"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"}