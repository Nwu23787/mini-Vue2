{"version":3,"file":"vue.js","sources":["../src/compiler/index.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\r\n\r\n// 匹配 <xxx 开始的标签名，也就是开始标签的前半部分，最终匹配到的分组是开始标签的名字\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`)\r\n\r\n// 匹配结束标签 </xxx> 最终匹配到的分组是结束标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\r\n\r\n// 匹配标签上的属性，属性的第一个分组是属性的名称（key），第3 | 4 | 5 分组中有一个是他的值\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\r\n\r\n// 匹配开始标签的结束部分的 比如 <span> 的>  和 <br/> 的 />\r\nconst startTagClose = /^\\s*(\\/?)>/\r\n\r\n// 匹配双花括号 {{value}}\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\r\n\r\n/* 语法树结构\r\n    元素节点结构\r\n {\r\n     tag: 'div', // 标签名\r\n     type: 1, // 节点类型：1 元素节点 3 文本节点\r\n     attrs: [{ name: 'id', value: 'app' }], // 属性数组\r\n     parent: null, // 父节点，根节点的父节点wei null\r\n     children: [  // 节点下的子节点\r\n         {}, {}\r\n     ]\r\n }\r\n\r\n    文本节结构\r\n {\r\n    type: 3,\r\n    text,\r\n    parent: currentParent\r\n }\r\n */\r\n\r\n// 将 template 模版转化成 AST 语法树\r\nfunction parseHTML(html) {\r\n\r\n    const ELEMENT_TYPE = 1 // 元素节点类型\r\n    const TXET_TYPE = 3 // 文本节点类型\r\n\r\n    let stack = [] // 栈，用于创建语法树时判断节点的父节点\r\n    let currentParent = null; // 栈顶指针，指向栈中的最后一个节点 \r\n    let root = null // 指向 AST 语法树的根节点\r\n\r\n    // 创建语法树节点函数\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            attrs,\r\n            children: [],\r\n            parent: null\r\n        }\r\n    }\r\n\r\n    // 下面的三个方法都是用于生成抽象语法树的\r\n    // 处理开始标签\r\n    function start(tag, attrs) {\r\n        // 遇到开始标签，入栈\r\n        let node = createASTElement(tag, attrs)\r\n\r\n        if (!root) root = node //还没有根AST节点，那么这个节点就是根节点\r\n\r\n        // 栈中最后一个节点就是新节点的父节点\r\n        node.parent = currentParent\r\n        if (currentParent) currentParent.children.push(node)\r\n\r\n        // 节点入栈\r\n        stack.push(node)\r\n        // 移动栈顶指针\r\n        currentParent = node\r\n    }\r\n\r\n    // 处理文本标签\r\n    function chars(text) {\r\n        // 把空文本删掉，实际上源码中是会保存两个空格的，多于两个空格的就删掉了\r\n        text = text.replace(/\\s/g, '')\r\n        // 文本标签不用入栈，他就是当前栈顶指针指向的那个开始节点的子节点\r\n        text && currentParent.children.push({\r\n            type: TXET_TYPE,\r\n            text,\r\n            parent: currentParent\r\n        })\r\n    }\r\n\r\n    // 处理结束标签\r\n    function end(tag) {\r\n        // 遇到结束标签，弹出栈里的最后一个开始节点，并且更新 currentParent\r\n        stack.pop()\r\n        currentParent = stack[stack.length - 1]\r\n    }\r\n\r\n    // 删除html的前 n 位字符\r\n    function advance(n) {\r\n        html = html.substring(n)\r\n    }\r\n    // 解析开始标签\r\n    function parseStarTag() {\r\n        const start = html.match(startTagOpen) // 得到一个数组，以div为例：['<div','div']，没匹配到，start 为 null\r\n        if (start) {\r\n            // 匹配到了，返回开始标签的对象\r\n            const match = {\r\n                tagName: start[1],\r\n                attrs: []\r\n            }\r\n            // 把匹配过的部分删掉，便于继续向后匹配\r\n            advance(start[0].length)\r\n\r\n            // 继续向后匹配，获得开始标签的属性，一直匹配到开始标签的结束位置\r\n            let attr, end\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                // 把匹配到的属性删掉\r\n                if (attr) advance(attr[0].length)\r\n                match.attrs.push({\r\n                    name: attr[1],\r\n                    value: attr[3] || attr[4] || attr[5] // 或的特性，找到第一个真值就不会再继续了\r\n                })\r\n            }\r\n            // 把开始标签的结束位置删掉\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n\r\n            return match\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    // html 一般是以 < 开头的，如果不是以 < 开头的，说明开头是一个文本节点\r\n    while (html) {\r\n        // 如果 textEnd 为 0，说明模版开头是一个标签（开始或结束标签未知）\r\n        // 如果 textEnd 不是 0，说明模版开头是一段文本，textEnd 表示文本节点结束的位置\r\n        let textEnd = html.indexOf('<')\r\n\r\n        if (textEnd === 0) {\r\n            //开头是标签，尝试匹配是否为开始标签\r\n            const startTagMatch = parseStarTag()\r\n\r\n            // 匹配到了开始标签，也把开始标签从html中删除掉了，需要进行下一轮的匹配了\r\n            if (startTagMatch) {\r\n                // 把开始标签交给生成语法树的函数处理\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            else {\r\n                // 不是开始标签，那么匹配到的一定是结束标签\r\n                const endTagMatch = html.match(endTag)\r\n                if (endTagMatch) {\r\n                    // 把结束标签交给生成语法树的函数处理\r\n                    end(endTagMatch[1])\r\n                    // 把匹配过的部分删除\r\n                    advance(endTagMatch[0].length)\r\n                    continue\r\n                }\r\n            }\r\n        }\r\n\r\n        // 处理文本节点\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd) // 截取文本节点的内容\r\n\r\n            if (text) {\r\n                // 把文本节点的内容交给生成语法树的函数处理\r\n                chars(text)\r\n                advance(text.length) // 把文本节点从 html 中删除\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(root);\r\n}\r\n\r\n// 编译模版，返回render方法\r\nexport function compileToFunction(template) {\r\n    // 1. 将 template 模版转化成 AST 语法树\r\n    let ast = parseHTML(template)\r\n\r\n    // 2. 生成 render 方法\r\n}","    // 重写数组中可以改变数组的7个方法，并返回重写后的原型对象\r\n    let oldProto = Array.prototype\r\n    // 不可以直接修改数组的原型，通过类似于子类重写的方式，使 newProto 的原型指向原来数组的原型，在 newProto 上重写方法不会影响到原数组原型\r\n    let newProto = Object.create(oldProto)\r\n\r\n    const methods = [\r\n        'push',\r\n        'pop',\r\n        'shift',\r\n        'unshift',\r\n        'reverse',\r\n        'sort',\r\n        'splice'\r\n    ]\r\n\r\n    methods.forEach(method => {\r\n        newProto[method] = function (...args) {\r\n            // 调用原有原型上的相同方法，但要注意this问题\r\n            const res = oldProto[method].call(this, ...args)\r\n            // 获取到新增的元素\r\n            let newNode = undefined\r\n            // 对于新增元素的方法，必须给新增的元素添加监听\r\n            if (method === 'push' || method === 'unshift') {\r\n                newNode = args\r\n            } else if (method === 'splice') {\r\n                // spilce 的参数除掉前两个参数之后，才是新增的元素\r\n                newNode = args.slice(2)\r\n            }\r\n\r\n            if (newNode) {\r\n                this.__ob__.observerArray(newNode)\r\n            }\r\n            return res\r\n        }\r\n\r\n    })\r\n\r\n    export default newProto\r\n\r\n","import newProto from \"./array\"\r\n\r\n/**\r\n * 将传入的 data 对象使用 defineproperty 进行劫持\r\n * @param {Object} data  要实现响应式的对象\r\n * @returns {} \r\n */\r\nexport function observe(data) {\r\n\r\n    // 判断 data 是否需要劫持，非对象不劫持\r\n    if (typeof data !== 'object' || typeof data == 'null') {\r\n        return\r\n    }\r\n\r\n    // 判断 data 是否已经被监听过了\r\n    if (data.__ob__) return data\r\n\r\n    //通过observer类进行监听\r\n    return new Observer(data)\r\n}\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n        // 把 data 对应的 Observer 实例添加到了 data 上，这样做的话，1 是可以通过监测是否存在_ob_属性来检测 data 是否已被监听过，2 是通过 _ob_ 可以访问到 walk 和 observerArray 以及其他的方法，便于其他地方使用\r\n        // 必须把 _ob_ 设置为不可枚举属性才行，否则在递归遍历监听的时候会死循环\r\n        Object.defineProperty(data, '__ob__', {\r\n            value: this,\r\n            enumerable: false\r\n        })\r\n        // 判断data是否为数组，数组不用进行每一项的劫持\r\n        if (Array.isArray(data)) {\r\n            // 通过修改data的原型，重写可以改变数组的方法\r\n            data.__proto__ = newProto\r\n            this.observerArray(data)\r\n        } else {\r\n            this.walk(data)\r\n        }\r\n    }\r\n    // 遍历对象，进行劫持\r\n    walk(data) {\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n    }\r\n\r\n    // 实现数组监测\r\n    observerArray(data) {\r\n        //  遍历数组，如果数组的子项是对象的话，要对这个对象进行劫持\r\n        data.forEach(item => observe(item))\r\n    }\r\n}\r\n\r\n/**\r\n * 实现对象指定属性的劫持\r\n * @param {Object} target 被劫持的对象\r\n * @param {String} key 需要被劫持的属性\r\n * @param {*} value 被劫持属性当前的值\r\n */\r\nexport function defineReactive(target, key, value) {\r\n    // 对属性值进行深层递归遍历\r\n    observe(value)\r\n    // 闭包。对外暴露了 set 和 get 方法，从而使 value 值不会被回收\r\n    Object.defineProperty(target, key, {\r\n        // 访问属性的时候，触发get\r\n        get() {\r\n            console.log('get', value);\r\n            return value\r\n        },\r\n        // 修改属性的时候，触发set\r\n        set(newValue) {\r\n            console.log('set', newValue);\r\n            if (newValue === value) return\r\n            // 修改之后重新劫持，因为如果用户将值修改为对象，那么要对这个对象进行深度劫持\r\n            observe(newValue)\r\n            value = newValue\r\n        }\r\n    })\r\n}","import { observe } from \"./observe/index\"\r\n\r\n/**\r\n * 初始化状态，分发init\r\n * @param {Object} vm Vue 实例\r\n */\r\nexport function initState(vm) {\r\n    const opts = vm.$options\r\n    // 是否传入data\r\n    if (opts.data) {\r\n        initData(vm)\r\n    }\r\n}\r\n\r\n/**\r\n * 代理对象，非真正的 Proxy\r\n * @param {Object} vm Vue 实例\r\n * @param {String} target 要代理的属性\r\n * @param {String} key target的建\r\n */\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, {\r\n        get() {\r\n            // 访问 vm[key] 就是在访问 vm._data[key]，即 vm[target][key]\r\n            return vm[target][key]\r\n        },\r\n        set(newValue) {\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 初始化 data 选项\r\n * @param {Object} vm Vue 实例\r\n */\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data\r\n    // 判断 data 的类型，如果是函数，执行它，获得对象。要注意this问题，this应该是Vue实例\r\n    data = typeof data === 'function' ? data.call(vm) : data\r\n\r\n    vm._data = data\r\n    // 对数据对象进行劫持\r\n    observe(data)\r\n    // 代理一层，方便用户访问\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n}\r\n\r\n","import { compileToFunction } from \"./compiler/index\"\r\nimport { initState } from \"./state\"\r\n\r\n/**\r\n * 定义 _init 初始化 Vue 方法，并将其挂载到 Vue 实例的原型上，供 Vue 实例调用\r\n * @param {Object} Vue Vue 实例 \r\n * @returns {Void}\r\n */\r\nexport function initMixin(Vue) {\r\n    Vue.prototype._init = function (options) {\r\n        // this 就是 Vue 实例，经常写 this 太烦，又容易混淆 this，取别名\r\n        const vm = this\r\n        // 将用户选项挂载到 Vue 实例上，便于其他地方使用\r\n        vm.$options = options\r\n\r\n        // 初始化状态（data、computed、props等等）\r\n        initState(vm)\r\n\r\n        // 挂载数据，也就是将数据解析（或者说挂载）到 el 指定的 dom 上\r\n        if (options.el) {\r\n            vm.$mount(options.el)\r\n        }\r\n    }\r\n\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this\r\n        // 获取 el 对应的真实 dom\r\n        el = document.querySelector(el)\r\n        const opts = vm.$options\r\n        if (!opts.render) {\r\n            // 没有传 render 选项\r\n            let template\r\n            if (!opts.template && el) {\r\n                // 没有传入模版，但传入了el，那么就去找 el 指定的模版\r\n                // 获取到 el 对应的 HTML 结构，也就是模版\r\n                template = el.outerHTML\r\n            } else {\r\n                if (el) {\r\n                    // 传入了模版和 el\r\n                    template = opts.template\r\n                }\r\n            }\r\n            if (template) {\r\n                // 编译模版，获取 render\r\n                const render = compileToFunction(template)\r\n                opts.render = render\r\n            }\r\n        }\r\n\r\n        // 如果有模版，则编译成render；反之如果有render，则不必编译。模版和render函数最终都会被统一成render函数\r\n    }\r\n}\r\n\r\n","import { initMixin } from \"./init\"\r\n\r\n// Vue 实例的构造函数，options 为用户传入的选项（Vue2 的选项式API）\r\nfunction Vue(options){\r\n    // 初始化操作\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue) //将 _init 方法添加到 Vue 实例原型上，供 Vue 实例调用\r\n\r\nexport default Vue"],"names":["ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TXET_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStarTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","console","log","compileToFunction","template","oldProto","Array","prototype","newProto","Object","create","methods","forEach","method","_oldProto$method","_len","arguments","args","_key","res","call","apply","newNode","undefined","slice","__ob__","observerArray","observe","data","_typeof","Observer","_classCallCheck","defineProperty","enumerable","isArray","__proto__","walk","_createClass","key","keys","defineReactive","item","target","get","set","newValue","initState","vm","opts","$options","initData","proxy","_data","initMixin","Vue","_init","options","el","$mount","document","querySelector","render","outerHTML"],"mappings":"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"}