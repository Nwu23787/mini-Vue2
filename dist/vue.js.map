{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/index.js","../src/vdom/index.js","../src/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\r\n\r\n// 匹配 <xxx 开始的标签名，也就是开始标签的前半部分，最终匹配到的分组是开始标签的名字\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`)\r\n\r\n// 匹配结束标签 </xxx> 最终匹配到的分组是结束标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\r\n\r\n// 匹配标签上的属性，属性的第一个分组是属性的名称（key），第3 | 4 | 5 分组中有一个是他的值\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\r\n\r\n// 匹配开始标签的结束部分的 比如 <span> 的>  和 <br/> 的 />\r\nconst startTagClose = /^\\s*(\\/?)>/\r\n\r\n// 解析 html\r\nexport function parseHTML(html) {\r\n    const ELEMENT_TYPE = 1 // 元素节点类型\r\n    const TXET_TYPE = 3 // 文本节点类型\r\n\r\n    let stack = [] // 栈，用于创建语法树时判断节点的父节点\r\n    let currentParent = null; // 栈顶指针，指向栈中的最后一个节点 \r\n    let root = null // 指向 AST 语法树的根节点\r\n\r\n    // 创建语法树节点函数\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            attrs,\r\n            children: [],\r\n            parent: null\r\n        }\r\n    }\r\n\r\n    // 下面的三个方法都是用于生成抽象语法树的\r\n    // 处理开始标签\r\n    function start(tag, attrs) {\r\n        // 遇到开始标签，入栈\r\n        let node = createASTElement(tag, attrs)\r\n\r\n        if (!root) root = node //还没有根AST节点，那么这个节点就是根节点\r\n\r\n        // 栈中最后一个节点就是新节点的父节点\r\n        if (currentParent) {\r\n            node.parent = currentParent\r\n            currentParent.children.push(node)\r\n        }\r\n\r\n        // 节点入栈\r\n        stack.push(node)\r\n        // 移动栈顶指针\r\n        currentParent = node\r\n    }\r\n\r\n    // 处理文本标签\r\n    function chars(text) {\r\n        // 把空文本删掉，实际上源码中是会保存两个空格的，多于两个空格的就删掉了\r\n        text = text.replace(/\\s/g, '')\r\n        // 文本标签不用入栈，他就是当前栈顶指针指向的那个开始节点的子节点\r\n        text && currentParent.children.push({\r\n            type: TXET_TYPE,\r\n            text,\r\n            parent: currentParent\r\n        })\r\n    }\r\n\r\n    // 处理结束标签\r\n    function end(tag) {\r\n        // 遇到结束标签，弹出栈里的最后一个开始节点，并且更新 currentParent\r\n        stack.pop()\r\n        currentParent = stack[stack.length - 1]\r\n    }\r\n\r\n    // 删除html的前 n 位字符\r\n    function advance(n) {\r\n        html = html.substring(n)\r\n    }\r\n    // 解析开始标签\r\n    function parseStarTag() {\r\n        const start = html.match(startTagOpen) // 得到一个数组，以div为例：['<div','div']，没匹配到，start 为 null\r\n        if (start) {\r\n            // 匹配到了，返回开始标签的对象\r\n            const match = {\r\n                tagName: start[1],\r\n                attrs: []\r\n            }\r\n            // 把匹配过的部分删掉，便于继续向后匹配\r\n            advance(start[0].length)\r\n\r\n            // 继续向后匹配，获得开始标签的属性，一直匹配到开始标签的结束位置\r\n            let attr, end\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                // 把匹配到的属性删掉\r\n                if (attr) advance(attr[0].length)\r\n                match.attrs.push({\r\n                    name: attr[1],\r\n                    value: attr[3] || attr[4] || attr[5] // 或的特性，找到第一个真值就不会再继续了\r\n                })\r\n            }\r\n            // 把开始标签的结束位置删掉\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n\r\n            return match\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    // html 一般是以 < 开头的，如果不是以 < 开头的，说明开头是一个文本节点\r\n    while (html) {\r\n        // 如果 textEnd 为 0，说明模版开头是一个标签（开始或结束标签未知）\r\n        // 如果 textEnd 不是 0，说明模版开头是一段文本，textEnd 表示文本节点结束的位置\r\n        let textEnd = html.indexOf('<')\r\n\r\n        if (textEnd === 0) {\r\n            //开头是标签，尝试匹配是否为开始标签\r\n            const startTagMatch = parseStarTag()\r\n\r\n            // 匹配到了开始标签，也把开始标签从html中删除掉了，需要进行下一轮的匹配了\r\n            if (startTagMatch) {\r\n                // 把开始标签交给生成语法树的函数处理\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            else {\r\n                // 不是开始标签，那么匹配到的一定是结束标签\r\n                const endTagMatch = html.match(endTag)\r\n                if (endTagMatch) {\r\n                    // 把结束标签交给生成语法树的函数处理\r\n                    end(endTagMatch[1])\r\n                    // 把匹配过的部分删除\r\n                    advance(endTagMatch[0].length)\r\n                    continue\r\n                }\r\n            }\r\n        }\r\n\r\n        // 处理文本节点\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd) // 截取文本节点的内容\r\n\r\n            if (text) {\r\n                // 把文本节点的内容交给生成语法树的函数处理\r\n                chars(text)\r\n                advance(text.length) // 把文本节点从 html 中删除\r\n            }\r\n        }\r\n    }\r\n    return root\r\n}","import { parseHTML } from \"./parse\"\r\n\r\n\r\n\r\n// 匹配双花括号 {{value}}\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\r\n\r\n/* 语法树结构\r\n    元素节点结构\r\n {\r\n     tag: 'div', // 标签名\r\n     type: 1, // 节点类型：1 元素节点 3 文本节点\r\n     attrs: [{ name: 'id', value: 'app' }], // 属性数组\r\n     parent: null, // 父节点，根节点的父节点wei null\r\n     children: [  // 节点下的子节点\r\n         {}, {}\r\n     ]\r\n }\r\n\r\n    文本节结构\r\n {\r\n    type: 3,\r\n    text,\r\n    parent: currentParent\r\n }\r\n */\r\n\r\n// 将 template 模版转化成 AST 语法树\r\n\r\nfunction genProps(attrs) {\r\n    let str = ``\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i]\r\n        if (attr.name === 'style') {\r\n            // 单独处理style属性，因为要将这个属性封装成对象\r\n            let obj = {}\r\n            attr.value.split(';').forEach(item => {\r\n                let [key, value] = item.split(':')\r\n                obj[key] = value\r\n            })\r\n            attr.value = obj\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n    }\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\n\r\n// 生成某一子节点的字符串参数\r\nconst genChild = (item) => {\r\n    if (item.type === 1) {\r\n        // 是元素节点，直接调用codegen生成\r\n        return codegen(item)\r\n    } else {\r\n        // 是文本节点\r\n        // 判断文本里面有没有变量，就是 {{}}\r\n        let text = item.text\r\n        if (!defaultTagRE.test(text)) {\r\n            // 是纯文本节点\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else {\r\n            // 文本中有变量\r\n            let tokens = [] //  保存截取的结果\r\n            let match\r\n            defaultTagRE.lastIndex = 0 // 上面test了，将指针归位\r\n            let lastIndex = 0 // 用于截取非变量文本\r\n            while (match = defaultTagRE.exec(text)) { // exec 方法，遇到满足正则的字符串就返回一次\r\n                let index = match.index\r\n                // 如果这次匹配到结果的开始位置和上一次匹配结束的位置不同，说明这两个位置中间有一个非变量的纯文本\r\n                if (index > lastIndex) {\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                // 匹配变量的结果\r\n                tokens.push(`_s(${match[1].trim()})`) //去掉{{}} 中的空格\r\n\r\n                // 移动 lastIndex，保存上一次匹配的最后位置\r\n                lastIndex = index + match[0].length\r\n            }\r\n\r\n            // 循环结束之后，还要判断一次有没有剩余的纯文本\r\n            if (lastIndex < text.length) {\r\n                // 说明上一次匹配之后，还剩余了文本，那么这个文本一定不是变量\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            return `_v(${tokens.join('+')})`\r\n        }\r\n    }\r\n}\r\n\r\n// 生成所有子节点的字符串参数\r\nconst genChildren = (children) => {\r\n    return children.map(item => genChild(item))\r\n}\r\n\r\nfunction codegen(ast) {\r\n    let children = genChildren(ast.children)\r\n    let code = `_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'}${ast.children.length ? `,${children}` : ''})`\r\n    // console.log(code);\r\n    return code\r\n}\r\n\r\n\r\n// 编译模版，返回render方法\r\nexport function compileToFunction(template) {\r\n    // 1. 将 template 模版转化成 AST 语法树\r\n    let ast = parseHTML(template)\r\n\r\n    // console.log(ast);\r\n    // 2. 生成 render 方法\r\n\r\n    // 目标：把AST语法树组装成下面这样的语法\r\n    // _c 生成元素节点\r\n    // _v 生成文本节点\r\n    // _s 处理变量\r\n    // render(){\r\n    // return _c('div', { id: 'app', style: { \"color\": 'red' } }, _v(_s(name) + 'hello'), _v('span', null, _v('text1')))\r\n    // }\r\n\r\n    let code = codegen(ast)\r\n\r\n    code = `with(this){\r\n        return ${code}\r\n    }` // 使用 with，改变变量的取值位置，让函数中的变量都向vm上去取值\r\n\r\n    let render = new Function(code) // 使用 new Function 生成 render 函数\r\n\r\n    return render\r\n}","// 构造 VNode 的相关方法\r\n\r\n// 创建元素节点的VNode，即 h()\r\nexport function createElement(vm, tag, data = {}, ...children) { // Vue 实例，标签名，属性，子节点\r\n    if (data == null) {\r\n        data = {}\r\n    }\r\n    let key = data.key\r\n    if (key) delete data.key\r\n    return vnode(vm, tag, key, data, children)\r\n}\r\n\r\n// 创建文本节点的VNode\r\nexport function createTextVNode(vm, text) {\r\n    return vnode(vm, undefined, undefined, undefined, undefined, text)\r\n}\r\n\r\n// 创建 Vnode  的方法\r\nfunction vnode(vm, tag, key, data, children, text) {\r\n    // 返回创建的虚拟 DOM\r\n    return {\r\n        vm,\r\n        tag,\r\n        key,\r\n        data,\r\n        children,\r\n        text\r\n        // 事件、插槽、指令......\r\n    }\r\n}\r\n\r\n// 和 AST 不一样，AST 只是语法层面的抽象，语法是什么样，AST节点就必须是什么样，不能人为添加一些属性\r\n// 但是虚拟 DOM 是描述 dom 元素的，可以增加一些自定义的属性\r\n// AST 是描述语言的\r\n// 虚拟 DOM 是描述 DOM 的","import { createElement, createTextVNode } from \"./vdom/index\"\r\n\r\nfunction createElm(vnode) {\r\n    // 将 VNode 解构\r\n    let { tag, data, children, text } = vnode\r\n    if (typeof tag === 'string') {\r\n        // 传入的是标签，文本节点的tag为undefined\r\n        // 创建元素\r\n        // ！！！把真实 DOM 挂载到 虚拟DOM 上！便于后续更新，比如修改了属性，就可以直接找到真实的dom进行更新\r\n        vnode.el = document.createElement(tag)\r\n\r\n        // 更新元素属性\r\n        patchProps(vnode.el, data)\r\n\r\n        // 创建子DOM\r\n        children.forEach((item) => {\r\n            // 挂载子DOM\r\n            vnode.el.appendChild(createElm(item))\r\n        })\r\n    } else {\r\n        vnode.el = document.createTextNode(text)\r\n    }\r\n    return vnode.el\r\n}\r\n\r\n// 处理属性\r\nfunction patchProps(el, props) {\r\n    for (let key in props) {\r\n        // 单独处理style\r\n        if (key === 'style') {\r\n            for (let styleName in props.style) {\r\n                el.style[styleName] = props.style[styleName]\r\n            }\r\n        } else {\r\n            el.setAttribute(key, props[key])\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 接收两个参数\r\n * 1. 初渲染：第一个参数为真实的 DOM 对象，第二个参数为 VNode，则根据第二个参数，生成真实 DOM，替换第一个 DOM 对象\r\n * 2. 更新：第一个参数 和 第二个参数都为 VNode，则比较两者 vnode差异，更新真实 dom\r\n * @param {Object} oldVnode 一个 VNode 或者是一个真实的 DOM 对象\r\n * @param {Object} newVnode 新的 VNode\r\n */\r\nfunction patch(oldVnode, newVnode) {\r\n    const isRealElement = oldVnode.nodeType\r\n\r\n    if (isRealElement) {\r\n        // 对象上有 nodeType 属性，则为真实 DOM\r\n        const elm = oldVnode\r\n\r\n        const parentElm = elm.parentNode // 获取到老节点的父节点，便于后面删除和新增（即替换）操作\r\n\r\n        // 创建真实 dom\r\n        let newElm = createElm(newVnode)\r\n        console.log(newElm);\r\n\r\n        // 先把新 DOM 插入到老DOM的后面，然后再删除老DOM，这样可以保证新DOM替换了老DOM\r\n        parentElm.insertBefore(newElm, elm.nextSibling)\r\n        parentElm.removeChild(elm)\r\n\r\n        // return newElm\r\n    } else {\r\n        // 进行 diff 算法，更新\r\n    }\r\n}\r\n\r\nexport function initLifeCycle(Vue) {\r\n    // 生成 Vnode 节点\r\n    Vue.prototype._c = function () {\r\n        return createElement(this, ...arguments)\r\n    }\r\n\r\n    // 处理文本节点\r\n    Vue.prototype._v = function () {\r\n        return createTextVNode(this, ...arguments)\r\n    }\r\n\r\n    // 处理变量\r\n    Vue.prototype._s = function (name) {\r\n        if (typeof name === 'object') {\r\n            return JSON.stringify(name) // 如果变量是对象，json序列化之后再返回\r\n        }\r\n        return name\r\n    }\r\n\r\n    // 挂载 render 函数到实例上\r\n    Vue.prototype._render = function () {\r\n        return this.$options.render.call(this) // 调用生成的render或者是传入的render，call 用于将this指向vm，使render内的变量向vm上取值\r\n    }\r\n\r\n    // 挂载 update 函数到实例上\r\n    Vue.prototype._update = function (vnode) {\r\n        const el = this.$el\r\n        // 传入两个参数，第一个参数是真实 dom，第二个参数是虚拟 dom，patch 会按照 vnode 创建一个真实 dom，替换掉我们传入的 el\r\n        return patch(el, vnode) // patch 更新 或者 初始化渲染 方法\r\n    }\r\n\r\n}\r\n\r\nexport function mountComponent(vm, el) {\r\n    // 将 el 对应的真实 dom 挂载到 vm 上，便于后面获取\r\n    vm.$el = el\r\n    // 1. 调用 render 方法，获得虚拟 DOM\r\n    let vnode = vm._render()\r\n    console.log(vnode);\r\n\r\n    // 2. 根据虚拟 DOM，生成真实 DOM\r\n    vm._update(vnode)\r\n\r\n    // 3. 将真实 DOM 插入到 el 中\r\n}","    // 重写数组中可以改变数组的7个方法，并返回重写后的原型对象\r\n    let oldProto = Array.prototype\r\n    // 不可以直接修改数组的原型，通过类似于子类重写的方式，使 newProto 的原型指向原来数组的原型，在 newProto 上重写方法不会影响到原数组原型\r\n    let newProto = Object.create(oldProto)\r\n\r\n    const methods = [\r\n        'push',\r\n        'pop',\r\n        'shift',\r\n        'unshift',\r\n        'reverse',\r\n        'sort',\r\n        'splice'\r\n    ]\r\n\r\n    methods.forEach(method => {\r\n        newProto[method] = function (...args) {\r\n            // 调用原有原型上的相同方法，但要注意this问题\r\n            const res = oldProto[method].call(this, ...args)\r\n            // 获取到新增的元素\r\n            let newNode = undefined\r\n            // 对于新增元素的方法，必须给新增的元素添加监听\r\n            if (method === 'push' || method === 'unshift') {\r\n                newNode = args\r\n            } else if (method === 'splice') {\r\n                // spilce 的参数除掉前两个参数之后，才是新增的元素\r\n                newNode = args.slice(2)\r\n            }\r\n\r\n            if (newNode) {\r\n                this.__ob__.observerArray(newNode)\r\n            }\r\n            return res\r\n        }\r\n\r\n    })\r\n\r\n    export default newProto\r\n\r\n","import newProto from \"./array\"\r\n\r\n/**\r\n * 将传入的 data 对象使用 defineproperty 进行劫持\r\n * @param {Object} data  要实现响应式的对象\r\n * @returns {} \r\n */\r\nexport function observe(data) {\r\n\r\n    // 判断 data 是否需要劫持，非对象不劫持\r\n    if (typeof data !== 'object' || typeof data == 'null') {\r\n        return\r\n    }\r\n\r\n    // 判断 data 是否已经被监听过了\r\n    if (data.__ob__) return data\r\n\r\n    //通过observer类进行监听\r\n    return new Observer(data)\r\n}\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n        // 把 data 对应的 Observer 实例添加到了 data 上，这样做的话，1 是可以通过监测是否存在_ob_属性来检测 data 是否已被监听过，2 是通过 _ob_ 可以访问到 walk 和 observerArray 以及其他的方法，便于其他地方使用\r\n        // 必须把 _ob_ 设置为不可枚举属性才行，否则在递归遍历监听的时候会死循环\r\n        Object.defineProperty(data, '__ob__', {\r\n            value: this,\r\n            enumerable: false\r\n        })\r\n        // 判断data是否为数组，数组不用进行每一项的劫持\r\n        if (Array.isArray(data)) {\r\n            // 通过修改data的原型，重写可以改变数组的方法\r\n            data.__proto__ = newProto\r\n            this.observerArray(data)\r\n        } else {\r\n            this.walk(data)\r\n        }\r\n    }\r\n    // 遍历对象，进行劫持\r\n    walk(data) {\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n    }\r\n\r\n    // 实现数组监测\r\n    observerArray(data) {\r\n        //  遍历数组，如果数组的子项是对象的话，要对这个对象进行劫持\r\n        data.forEach(item => observe(item))\r\n    }\r\n}\r\n\r\n/**\r\n * 实现对象指定属性的劫持\r\n * @param {Object} target 被劫持的对象\r\n * @param {String} key 需要被劫持的属性\r\n * @param {*} value 被劫持属性当前的值\r\n */\r\nexport function defineReactive(target, key, value) {\r\n    // 对属性值进行深层递归遍历\r\n    observe(value)\r\n    // 闭包。对外暴露了 set 和 get 方法，从而使 value 值不会被回收\r\n    Object.defineProperty(target, key, {\r\n        // 访问属性的时候，触发get\r\n        get() {\r\n            console.log('get', value);\r\n            return value\r\n        },\r\n        // 修改属性的时候，触发set\r\n        set(newValue) {\r\n            console.log('set', newValue);\r\n            if (newValue === value) return\r\n            // 修改之后重新劫持，因为如果用户将值修改为对象，那么要对这个对象进行深度劫持\r\n            observe(newValue)\r\n            value = newValue\r\n        }\r\n    })\r\n}","import { observe } from \"./observe/index\"\r\n\r\n/**\r\n * 初始化状态，分发init\r\n * @param {Object} vm Vue 实例\r\n */\r\nexport function initState(vm) {\r\n    const opts = vm.$options\r\n    // 是否传入data\r\n    if (opts.data) {\r\n        initData(vm)\r\n    }\r\n}\r\n\r\n/**\r\n * 代理对象，非真正的 Proxy\r\n * @param {Object} vm Vue 实例\r\n * @param {String} target 要代理的属性\r\n * @param {String} key target的建\r\n */\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, {\r\n        get() {\r\n            // 访问 vm[key] 就是在访问 vm._data[key]，即 vm[target][key]\r\n            return vm[target][key]\r\n        },\r\n        set(newValue) {\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 初始化 data 选项\r\n * @param {Object} vm Vue 实例\r\n */\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data\r\n    // 判断 data 的类型，如果是函数，执行它，获得对象。要注意this问题，this应该是Vue实例\r\n    data = typeof data === 'function' ? data.call(vm) : data\r\n\r\n    vm._data = data\r\n    // 对数据对象进行劫持\r\n    observe(data)\r\n    // 代理一层，方便用户访问\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n}\r\n\r\n","import { compileToFunction } from \"./compiler/index\"\r\nimport { mountComponent } from \"./lifecycle\"\r\nimport { initState } from \"./state\"\r\n\r\n/**\r\n * 定义 _init 初始化 Vue 方法，并将其挂载到 Vue 实例的原型上，供 Vue 实例调用\r\n * @param {Object} Vue Vue 实例 \r\n * @returns {Void}\r\n */\r\nexport function initMixin(Vue) {\r\n    Vue.prototype._init = function (options) {\r\n        // this 就是 Vue 实例，经常写 this 太烦，又容易混淆 this，取别名\r\n        const vm = this\r\n        // 将用户选项挂载到 Vue 实例上，便于其他地方使用\r\n        vm.$options = options\r\n\r\n        // 初始化状态（data、computed、props等等）\r\n        initState(vm)\r\n\r\n        // 挂载数据，也就是将数据解析（或者说挂载）到 el 指定的 dom 上\r\n        if (options.el) {\r\n            vm.$mount(options.el)\r\n        }\r\n    }\r\n\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this\r\n        // 获取 el 对应的真实 dom\r\n        el = document.querySelector(el)\r\n        const opts = vm.$options\r\n        if (!opts.render) {\r\n            // 没有传 render 选项\r\n            let template\r\n            if (!opts.template && el) {\r\n                // 没有传入模版，但传入了el，那么就去找 el 指定的模版\r\n                // 获取到 el 对应的 HTML 结构，也就是模版\r\n                template = el.outerHTML\r\n            } else {\r\n                if (el) {\r\n                    // 传入了模版和 el\r\n                    template = opts.template\r\n                }\r\n            }\r\n            if (template && el) {\r\n                // 编译模版，获取 render\r\n                const render = compileToFunction(template)\r\n                opts.render = render\r\n            }\r\n        }\r\n        // 如果有模版，则编译成render；反之如果有render，则不必编译。模版和render函数最终都会被统一成render函数\r\n        console.log(opts.render);\r\n\r\n        mountComponent(vm,el) //得到了render 函数之后，执行组件的挂载\r\n    }\r\n}\r\n\r\n","import { initMixin } from \"./init\"\r\nimport { initLifeCycle } from \"./lifecycle\"\r\n\r\n// Vue 实例的构造函数，options 为用户传入的选项（Vue2 的选项式API）\r\nfunction Vue(options){\r\n    // 初始化操作\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue) //将 _init 方法添加到 Vue 实例原型上，供 Vue 实例调用\r\ninitLifeCycle(Vue)\r\n\r\nexport default Vue"],"names":["ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TXET_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStarTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","defaultTagRE","genProps","str","_loop","i","obj","split","forEach","item","_item$split","_item$split2","_slicedToArray","key","JSON","stringify","slice","genChild","codegen","test","tokens","lastIndex","exec","index","trim","join","genChildren","map","ast","code","compileToFunction","template","render","Function","createElement","vm","data","arguments","undefined","_len","Array","_key","vnode","createTextVNode","createElm","el","document","patchProps","appendChild","createTextNode","props","styleName","style","setAttribute","patch","oldVnode","newVnode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","console","log","insertBefore","nextSibling","removeChild","initLifeCycle","Vue","prototype","_c","apply","call","_v","_s","_typeof","_render","$options","_update","$el","mountComponent","oldProto","newProto","Object","create","methods","method","_oldProto$method","args","res","newNode","__ob__","observerArray","observe","Observer","_classCallCheck","defineProperty","enumerable","isArray","__proto__","walk","_createClass","keys","defineReactive","target","get","set","newValue","initState","opts","initData","proxy","_data","initMixin","_init","options","$mount","querySelector","outerHTML"],"mappings":"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"}